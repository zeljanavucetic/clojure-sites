<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1484917193935">{:repl-history {:ide [], :local [&quot;(ns data.mongoDB\n  (:require\n     [somnium.congomongo :as mongo]\n     [db.work-with-csv :as csv]))\n\n\n(def conn\n  (mongo/make-connection \&quot;sites-clojure\&quot;\n                         :host \&quot;192.168.0.17\&quot;\n                         :port 27017))\n\n;set the connection globally\n(mongo/set-connection! conn)\n(mongo/set-write-concern conn :strict)\n\n(defn insert-data-into-DBcollection [collection func &amp; args]\n  \&quot;Insert data from csv files into some collection\&quot;\n  (mongo/mass-insert!\n    collection\n    (apply func args)))\n&quot; &quot;(insert-data-into-DBcollection :sites csv/read-data \&quot;webSites.csv\&quot;)&quot; &quot;(ns routes.handler\n  (:use (compojure handler\n                   [core :only (GET POST ANY defroutes) :as compojure]))\n  (:require\n    [ring.adapter.jetty :only [run-jetty]]\n    [net.cgrand.enlive-html :as html]\n    [compojure.handler :as handler]\n    [compojure.route :as route]\n    [ring.middleware.session :as session]\n    [routes.templates :as templates]\n    [data.mongo-sites :as sites]\n    [rss.feed :as feed]\n    [rss.data :as data]\n    [db.work-with-csv :as csv]\n    [data.mongo-rss :as rss]\n    [clojure.string :as string]\n    [somnium.congomongo :as mongo]))\n\n(def conn\n  (mongo/make-connection \&quot;sites-clojure\&quot;\n                         :host \&quot;127.0.0.1\&quot;\n                         :port 27017))\n\n;set the connection globally\n(mongo/set-connection! conn)\n(mongo/set-write-concern conn :strict)\n\n\n(defn get-parametar [request param]\n  \&quot;Get certain parametar from post request\&quot;\n  (get (:params request) param))\n\n(defn make-url-for-rss [country lan word]\n  (str \&quot;https://news.google.de/news/feeds?pz=1&amp;cf=all&amp;ned=\&quot; (string/trim country) \&quot;&amp;hl=\&quot; (string/trim lan) \&quot;&amp;q=\&quot;\n       (string/trim word) \&quot;&amp;output=rss\&quot;))\n\n;\n;(def rss (feed/add-new-key-to-maps :day\n;                              (feed/add-new-key-to-maps :month\n;                                                   (feed/add-new-key-to-maps :year\n;                                                                        (feed/add-new-key-to-maps :pubdate\n;                                                                                             (feed/to-list-of-feed-maps mapa) (feed/to-list-of-pubdates datum))\n;                                                                        (feed/to-list-parts-of-date :year datum feed/get-year-from-date))\n;                                                   (feed/to-list-parts-of-date :month datum feed/get-month-from-date))\n;                              (feed/to-list-parts-of-date :day datum feed/get-day-from-date)))\n;\n;\n;(map :day (feed/to-list-parts-of-date :day datum feed/get-day-from-date))\n;(def zana (reverse (group-by :year (reverse (sort-by :day (feed/add-new-key-to-maps :day\n;                                                                                    (feed/add-new-key-to-maps :month\n;                                                                                                              (feed/add-new-key-to-maps :year\n;                                                                                                                                        (feed/add-new-key-to-maps :pubdate\n;                                                                                                                                                                  (feed/to-list-of-feed-maps  (map :description  (flatten (map :items (flatten (data/parse-rss\n;                                                                                                                                                                                                                                                 (feed/get-feed\n;                                                                                                                                                                                                                                                   \&quot;https://news.google.de/news/feeds?pz=1&amp;cf=all&amp;q=Tomislav+Nikolic&amp;output=rss\&quot;))))))) (feed/to-list-of-pubdates datum))\n;                                                                                                                                        (feed/to-list-parts-of-date :year datum feed/get-year-from-date))\n;                                                                                                              (feed/to-list-parts-of-date :month datum feed/get-month-from-date))\n;                                                                                    (feed/to-list-parts-of-date :day datum feed/get-day-from-date)))))))\n\n\n; prosledi f-ji reverse (sort-by :day (sort-by :month (reverse (sort-by :year rss))))\n\n(defroutes app-routes\n           (GET \&quot;/\&quot; [] (html/emit* (templates/show-main \&quot;main.html\&quot; (into []\n                                                                          (take 10 (reverse (sort-by :Rank (sites/get-sites))))))))\n\n           (GET \&quot;/slovenija\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                               (sites/get-sites-only-for-specific-country \&quot;slovenia\&quot;)) \&quot;slovenia\&quot;)))\n\n           (GET \&quot;/Albanija\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                              (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Albanija\&quot;))) \&quot;Albanija\&quot;)))\n\n           (GET \&quot;/Balkan-Evropa\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                                   (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Balkan-Evropa\&quot;))) \&quot;Balkan-Evropa\&quot;)))\n\n           (GET \&quot;/BiH\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                         (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;BiH\&quot;))) \&quot;BiH\&quot;)))\n\n           (GET \&quot;/Bugarska\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                              (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Bugarska\&quot;))) \&quot;Bugarska\&quot;)))\n\n           (GET \&quot;/CrnaGora\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                              (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Crna Gora\&quot;))) \&quot;Crna Gora\&quot;)))\n\n           (GET \&quot;/Hrvatska\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                              (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Hrvatska\&quot;))) \&quot;Hrvatska\&quot;)))\n\n           (GET \&quot;/Madjarska\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                               (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Madjarska\&quot;))) \&quot;Madjarska\&quot;)))\n\n           (GET \&quot;/Makedonija\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                                (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Makedonija\&quot;))) \&quot;Makedonija\&quot;)))\n\n           (GET \&quot;/Mirovneoperacije\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                                      (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Mirovne operacije\&quot;))) \&quot;Mirovne operacije\&quot;)))\n\n           (GET \&quot;/KiM\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                         (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Kosovo i Metohija\&quot;))) \&quot;Kosovo i Metohija\&quot;)))\n\n           (GET \&quot;/Ukrajina\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                              (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Ukrajina\&quot;))) \&quot;Ukrajina\&quot;)))\n\n\n           (GET \&quot;/Ostalo\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                            (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Ostalo\&quot;))) \&quot;Ostalo\&quot;)))\n\n           (GET \&quot;/Rumunija\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                              (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Rumunija\&quot;))) \&quot;Rumunija\&quot;)))\n\n           (GET \&quot;/Bliskiistok\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                                 (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Bliski istok\&quot;))) \&quot;Bliski istok\&quot;)))\n\n           (GET \&quot;/rss:req\&quot; [req] (html/emit* (templates/show-rss\n                                               (into [] (mongo/fetch :rss :only {:_id false\n                                                                                 :display_name true\n                                                                                 :name true}))\n                                               (feed/my-rss-map req)\n                                               (rss/get-rssFeedURL req) req)))\n\n           (GET \&quot;/addRss\&quot; [] (html/emit* (templates/show-get-url-for-rss\n                                           (into []\n                                                 (mongo/fetch :languages :only {:_id false\n                                                                                :Value true\n                                                                                :Headlinelink true})))))\n\n           (GET \&quot;/addUrl\&quot; [] (html/emit* (templates/show-add-new-site\n                                           (sites/get-distinct-values :Country))))\n\n           (GET \&quot;/gdelt\&quot; [] (html/emit* (templates/show-gelt-news\n                                          (into []\n                                                (mongo/fetch :countries :only {:_id false\n                                                                               :Countrylink true}))\n                                          (into []\n                                                (mongo/fetch :languages :only {:_id false\n                                                                               :Headlinelink true})))))\n\n           (POST \&quot;/deleteSite\&quot; request\n             ;(def provera (:params request))\n             (let [link (get (:params request) :link)]\n               (sites/delete-site link)))\n\n           (POST \&quot;/increaseRank\&quot; request\n             (let [link (get (:params request) :link)] (sites/increase-rank link))\n             ;(def provera (:params request))\n             )\n\n           (POST \&quot;/updateSite\&quot; request\n             (let [desclink (get (:params request) :desclink)\n                   description (get (:params request) :description)\n                   rank (get (:params request) :rank)]\n               (sites/update-site desclink description rank)))\n\n           (POST \&quot;/addRss\&quot; request\n             (rss/add-new-rssFeedURL\n               (make-url-for-rss (get-parametar request :country)\n                                 (get-parametar request :language)\n                                 (get-parametar request :word))\n               (str (get-parametar request :word) \&quot; - lang: \&quot; (get-parametar request :language)) (str (get-parametar request :word))))\n\n           (POST \&quot;/addUrl\&quot; request\n             (let [desclink (get (:params request) :desclink)\n                   description (get (:params request) :description)\n                   rank (get (:params request) :rank)\n                   country (get (:params request) :country)]\n               (sites/add-site desclink description rank country)))\n\n           (POST \&quot;/zana\&quot; request\n             (def f (:form-params request)))\n\n\n           (route/resources \&quot;/\&quot;)\n           (route/not-found \&quot;&lt;h1&gt;Page not found&lt;/h1&gt;\&quot;))\n\n\n\n\n\n(def app\n  (-&gt; (handler/site app-routes)\n      (session/wrap-session)))\n\n(defn start-server []\n  (ring.adapter.jetty/run-jetty #'app {:port 9000 :join? false}))\n\n\n&quot; &quot;(ns routes.handler\n  (:use (compojure handler\n                   [core :only (GET POST ANY defroutes) :as compojure]))\n  (:require\n    [ring.adapter.jetty :only [run-jetty]]\n    [net.cgrand.enlive-html :as html]\n    [compojure.handler :as handler]\n    [compojure.route :as route]\n    [ring.middleware.session :as session]\n    [routes.templates :as templates]\n    [data.mongo-sites :as sites]\n    [rss.feed :as feed]\n    [rss.data :as data]\n    [db.work-with-csv :as csv]\n    [data.mongo-rss :as rss]\n    [clojure.string :as string]\n    [somnium.congomongo :as mongo]))&quot; &quot;(ns data.mongo-rss\n  (:require\n    [somnium.congomongo :as mongo]\n    [ring.util.response :as resp]))\n\n\n(defn rssFeedURL-exists? [url]\n  \&quot;Check if rss feed url exists.\&quot;\n  (if (not= 0 (count\n                (filter not-empty\n                        (mongo/fetch :rss :only {:_id false} :where {:url url})))) true false))\n\n\n\n(defn add-new-rssFeedURL [link display-name name]\n  \&quot;If the url doesn't exist in the collection :rss, insert the url.\&quot;\n  (if-not (rssFeedURL-exists? link)\n    (do\n      (mongo/insert! :rss {:url link\n                           :display_name display-name\n                           :name name})\n      (resp/response \&quot;Creation succeeded!\&quot;))\n    (resp/response \&quot;Rss feed url exists!\&quot;)))\n\n(add-new-rssFeedURL \&quot;b cjscb\&quot; \&quot;display\&quot; \&quot;name\&quot;)\n\n(defn get-rssFeedURL [name]\n  \&quot;Get rss feed url from database with certain display_name-key\&quot;\n  (mongo/fetch-one :rss :only {:_id false\n                               :url true\n                               :display_name true\n                               :name true} :where {:display_name name}))\n&quot; &quot;(ns routes.handler\n  (:use (compojure handler\n                   [core :only (GET POST ANY defroutes) :as compojure]))\n  (:require\n    [ring.adapter.jetty :only [run-jetty]]\n    [net.cgrand.enlive-html :as html]\n    [compojure.handler :as handler]\n    [compojure.route :as route]\n    [ring.middleware.session :as session]\n    [routes.templates :as templates]\n    [data.mongo-sites :as sites]\n    [rss.feed :as feed]\n    [rss.data :as data]\n    [db.work-with-csv :as csv]\n    [data.mongo-rss :as rss]\n    [clojure.string :as string]\n    [somnium.congomongo :as mongo]))\n\n(def conn\n  (mongo/make-connection \&quot;sites-clojure\&quot;\n                         :host \&quot;192.168.0.17\&quot;\n                         :port 27017))\n\n;set the connection globally\n(mongo/set-connection! conn)\n(mongo/set-write-concern conn :strict)\n\n\n(defn get-parametar [request param]\n  \&quot;Get certain parametar from post request\&quot;\n  (get (:params request) param))\n\n(defn make-url-for-rss [country lan word]\n  (str \&quot;https://news.google.de/news/feeds?pz=1&amp;cf=all&amp;ned=\&quot; (string/trim country) \&quot;&amp;hl=\&quot; (string/trim lan) \&quot;&amp;q=\&quot;\n       (string/trim word) \&quot;&amp;output=rss\&quot;))\n\n;\n;(def rss (feed/add-new-key-to-maps :day\n;                              (feed/add-new-key-to-maps :month\n;                                                   (feed/add-new-key-to-maps :year\n;                                                                        (feed/add-new-key-to-maps :pubdate\n;                                                                                             (feed/to-list-of-feed-maps mapa) (feed/to-list-of-pubdates datum))\n;                                                                        (feed/to-list-parts-of-date :year datum feed/get-year-from-date))\n;                                                   (feed/to-list-parts-of-date :month datum feed/get-month-from-date))\n;                              (feed/to-list-parts-of-date :day datum feed/get-day-from-date)))\n;\n;\n;(map :day (feed/to-list-parts-of-date :day datum feed/get-day-from-date))\n;(def zana (reverse (group-by :year (reverse (sort-by :day (feed/add-new-key-to-maps :day\n;                                                                                    (feed/add-new-key-to-maps :month\n;                                                                                                              (feed/add-new-key-to-maps :year\n;                                                                                                                                        (feed/add-new-key-to-maps :pubdate\n;                                                                                                                                                                  (feed/to-list-of-feed-maps  (map :description  (flatten (map :items (flatten (data/parse-rss\n;                                                                                                                                                                                                                                                 (feed/get-feed\n;                                                                                                                                                                                                                                                   \&quot;https://news.google.de/news/feeds?pz=1&amp;cf=all&amp;q=Tomislav+Nikolic&amp;output=rss\&quot;))))))) (feed/to-list-of-pubdates datum))\n;                                                                                                                                        (feed/to-list-parts-of-date :year datum feed/get-year-from-date))\n;                                                                                                              (feed/to-list-parts-of-date :month datum feed/get-month-from-date))\n;                                                                                    (feed/to-list-parts-of-date :day datum feed/get-day-from-date)))))))\n\n\n; prosledi f-ji reverse (sort-by :day (sort-by :month (reverse (sort-by :year rss))))\n\n(defroutes app-routes\n           (GET \&quot;/\&quot; [] (html/emit* (templates/show-main \&quot;main.html\&quot; (into []\n                                                                          (take 10 (reverse (sort-by :Rank (sites/get-sites))))))))\n\n           (GET \&quot;/slovenija\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                               (sites/get-sites-only-for-specific-country \&quot;slovenia\&quot;)) \&quot;slovenia\&quot;)))\n\n           (GET \&quot;/Albanija\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                              (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Albanija\&quot;))) \&quot;Albanija\&quot;)))\n\n           (GET \&quot;/Balkan-Evropa\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                                   (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Balkan-Evropa\&quot;))) \&quot;Balkan-Evropa\&quot;)))\n\n           (GET \&quot;/BiH\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                         (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;BiH\&quot;))) \&quot;BiH\&quot;)))\n\n           (GET \&quot;/Bugarska\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                              (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Bugarska\&quot;))) \&quot;Bugarska\&quot;)))\n\n           (GET \&quot;/CrnaGora\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                              (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Crna Gora\&quot;))) \&quot;Crna Gora\&quot;)))\n\n           (GET \&quot;/Hrvatska\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                              (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Hrvatska\&quot;))) \&quot;Hrvatska\&quot;)))\n\n           (GET \&quot;/Madjarska\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                               (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Madjarska\&quot;))) \&quot;Madjarska\&quot;)))\n\n           (GET \&quot;/Makedonija\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                                (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Makedonija\&quot;))) \&quot;Makedonija\&quot;)))\n\n           (GET \&quot;/Mirovneoperacije\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                                      (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Mirovne operacije\&quot;))) \&quot;Mirovne operacije\&quot;)))\n\n           (GET \&quot;/KiM\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                         (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Kosovo i Metohija\&quot;))) \&quot;Kosovo i Metohija\&quot;)))\n\n           (GET \&quot;/Ukrajina\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                              (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Ukrajina\&quot;))) \&quot;Ukrajina\&quot;)))\n\n\n           (GET \&quot;/Ostalo\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                            (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Ostalo\&quot;))) \&quot;Ostalo\&quot;)))\n\n           (GET \&quot;/Rumunija\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                              (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Rumunija\&quot;))) \&quot;Rumunija\&quot;)))\n\n           (GET \&quot;/Bliskiistok\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                                 (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Bliski istok\&quot;))) \&quot;Bliski istok\&quot;)))\n\n           (GET \&quot;/rss:req\&quot; [req] (html/emit* (templates/show-rss\n                                               (into [] (mongo/fetch :rss :only {:_id false\n                                                                                 :display_name true\n                                                                                 :name true}))\n                                               (feed/my-rss-map req)\n                                               (rss/get-rssFeedURL req) req)))\n\n           (GET \&quot;/addRss\&quot; [] (html/emit* (templates/show-get-url-for-rss\n                                           (into []\n                                                 (mongo/fetch :languages :only {:_id false\n                                                                                :Value true\n                                                                                :Headlinelink true})))))\n\n           (GET \&quot;/addUrl\&quot; [] (html/emit* (templates/show-add-new-site\n                                           (sites/get-distinct-values :Country))))\n\n           (GET \&quot;/gdelt\&quot; [] (html/emit* (templates/show-gelt-news\n                                          (into []\n                                                (mongo/fetch :countries :only {:_id false\n                                                                               :Countrylink true}))\n                                          (into []\n                                                (mongo/fetch :languages :only {:_id false\n                                                                               :Headlinelink true})))))\n\n           (POST \&quot;/deleteSite\&quot; request\n             ;(def provera (:params request))\n             (let [link (get (:params request) :link)]\n               (sites/delete-site link)))\n\n           (POST \&quot;/increaseRank\&quot; request\n             (let [link (get (:params request) :link)] (sites/increase-rank link))\n             ;(def provera (:params request))\n             )\n\n           (POST \&quot;/updateSite\&quot; request\n             (let [desclink (get (:params request) :desclink)\n                   description (get (:params request) :description)\n                   rank (get (:params request) :rank)]\n               (sites/update-site desclink description rank)))\n\n           (POST \&quot;/addRss\&quot; request\n             (rss/add-new-rssFeedURL\n               (make-url-for-rss (get-parametar request :country)\n                                 (get-parametar request :language)\n                                 (get-parametar request :word))\n               (str (get-parametar request :word) \&quot; - lang: \&quot; (get-parametar request :language)) (str (get-parametar request :word))))\n\n           (POST \&quot;/addUrl\&quot; request\n             (let [desclink (get (:params request) :desclink)\n                   description (get (:params request) :description)\n                   rank (get (:params request) :rank)\n                   country (get (:params request) :country)]\n               (sites/add-site desclink description rank country)))\n\n           (POST \&quot;/zana\&quot; request\n             (def f (:form-params request)))\n\n\n           (route/resources \&quot;/\&quot;)\n           (route/not-found \&quot;&lt;h1&gt;Page not found&lt;/h1&gt;\&quot;))\n\n\n\n\n\n(def app\n  (-&gt; (handler/site app-routes)\n      (session/wrap-session)))\n\n(defn start-server []\n  (ring.adapter.jetty/run-jetty #'app {:port 9000 :join? false}))\n\n\n&quot; &quot;(ring.adapter.jetty/run-jetty #'app {:port 9000 :join? false})&quot; &quot;(ns routes.handler\n  (:use (compojure handler\n                   [core :only (GET POST ANY defroutes) :as compojure]))\n  (:require\n    [ring.adapter.jetty :only [run-jetty]]\n    [net.cgrand.enlive-html :as html]\n    [compojure.handler :as handler]\n    [compojure.route :as route]\n    [ring.middleware.session :as session]\n    [routes.templates :as templates]\n    [data.mongo-sites :as sites]\n    [rss.feed :as feed]\n    [rss.data :as data]\n    [db.work-with-csv :as csv]\n    [data.mongo-rss :as rss]\n    [clojure.string :as string]\n    [somnium.congomongo :as mongo]))\n\n(def conn\n  (mongo/make-connection \&quot;sites-clojure\&quot;\n                         :host \&quot;192.168.0.17\&quot;\n                         :port 27017))\n\n;set the connection globally\n(mongo/set-connection! conn)\n(mongo/set-write-concern conn :strict)\n\n\n(defn get-parametar [request param]\n  \&quot;Get certain parametar from post request\&quot;\n  (get (:params request) param))\n\n(defn make-url-for-rss [country lan word]\n  (str \&quot;https://news.google.de/news/feeds?pz=1&amp;cf=all&amp;ned=\&quot; (string/trim country) \&quot;&amp;hl=\&quot; (string/trim lan) \&quot;&amp;q=\&quot;\n       (string/trim word) \&quot;&amp;output=rss\&quot;))\n\n;\n;(def rss (feed/add-new-key-to-maps :day\n;                              (feed/add-new-key-to-maps :month\n;                                                   (feed/add-new-key-to-maps :year\n;                                                                        (feed/add-new-key-to-maps :pubdate\n;                                                                                             (feed/to-list-of-feed-maps mapa) (feed/to-list-of-pubdates datum))\n;                                                                        (feed/to-list-parts-of-date :year datum feed/get-year-from-date))\n;                                                   (feed/to-list-parts-of-date :month datum feed/get-month-from-date))\n;                              (feed/to-list-parts-of-date :day datum feed/get-day-from-date)))\n;\n;\n;(map :day (feed/to-list-parts-of-date :day datum feed/get-day-from-date))\n;(def zana (reverse (group-by :year (reverse (sort-by :day (feed/add-new-key-to-maps :day\n;                                                                                    (feed/add-new-key-to-maps :month\n;                                                                                                              (feed/add-new-key-to-maps :year\n;                                                                                                                                        (feed/add-new-key-to-maps :pubdate\n;                                                                                                                                                                  (feed/to-list-of-feed-maps  (map :description  (flatten (map :items (flatten (data/parse-rss\n;                                                                                                                                                                                                                                                 (feed/get-feed\n;                                                                                                                                                                                                                                                   \&quot;https://news.google.de/news/feeds?pz=1&amp;cf=all&amp;q=Tomislav+Nikolic&amp;output=rss\&quot;))))))) (feed/to-list-of-pubdates datum))\n;                                                                                                                                        (feed/to-list-parts-of-date :year datum feed/get-year-from-date))\n;                                                                                                              (feed/to-list-parts-of-date :month datum feed/get-month-from-date))\n;                                                                                    (feed/to-list-parts-of-date :day datum feed/get-day-from-date)))))))\n\n\n; prosledi f-ji reverse (sort-by :day (sort-by :month (reverse (sort-by :year rss))))\n\n(defroutes app-routes\n           (GET \&quot;/\&quot; [] (html/emit* (templates/show-main \&quot;main.html\&quot; (into []\n                                                                          (take 10 (reverse (sort-by :Rank (sites/get-sites))))))))\n\n           (GET \&quot;/slovenija\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                               (sites/get-sites-only-for-specific-country \&quot;slovenia\&quot;)) \&quot;slovenia\&quot;)))\n\n           (GET \&quot;/Albanija\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                              (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Albanija\&quot;))) \&quot;Albanija\&quot;)))\n\n           (GET \&quot;/Balkan-Evropa\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                                   (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Balkan-Evropa\&quot;))) \&quot;Balkan-Evropa\&quot;)))\n\n           (GET \&quot;/BiH\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                         (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;BiH\&quot;))) \&quot;BiH\&quot;)))\n\n           (GET \&quot;/Bugarska\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                              (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Bugarska\&quot;))) \&quot;Bugarska\&quot;)))\n\n           (GET \&quot;/CrnaGora\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                              (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Crna Gora\&quot;))) \&quot;Crna Gora\&quot;)))\n\n           (GET \&quot;/Hrvatska\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                              (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Hrvatska\&quot;))) \&quot;Hrvatska\&quot;)))\n\n           (GET \&quot;/Madjarska\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                               (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Madjarska\&quot;))) \&quot;Madjarska\&quot;)))\n\n           (GET \&quot;/Makedonija\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                                (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Makedonija\&quot;))) \&quot;Makedonija\&quot;)))\n\n           (GET \&quot;/Mirovneoperacije\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                                      (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Mirovne operacije\&quot;))) \&quot;Mirovne operacije\&quot;)))\n\n           (GET \&quot;/KiM\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                         (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Kosovo i Metohija\&quot;))) \&quot;Kosovo i Metohija\&quot;)))\n\n           (GET \&quot;/Ukrajina\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                              (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Ukrajina\&quot;))) \&quot;Ukrajina\&quot;)))\n\n\n           (GET \&quot;/Ostalo\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                            (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Ostalo\&quot;))) \&quot;Ostalo\&quot;)))\n\n           (GET \&quot;/Rumunija\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                              (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Rumunija\&quot;))) \&quot;Rumunija\&quot;)))\n\n           (GET \&quot;/Bliskiistok\&quot; [] (html/emit* (templates/show-country-page (into []\n                                                                                 (sort-by :Desclink (sites/get-sites-only-for-specific-country \&quot;Bliski istok\&quot;))) \&quot;Bliski istok\&quot;)))\n\n           (GET \&quot;/rss:req\&quot; [req] (html/emit* (templates/show-rss\n                                               (into [] (mongo/fetch :rss :only {:_id false\n                                                                                 :display_name true\n                                                                                 :name true}))\n                                               (feed/my-rss-map req)\n                                               (rss/get-rssFeedURL req) req)))\n\n           (GET \&quot;/addRss\&quot; [] (html/emit* (templates/show-get-url-for-rss\n                                           (into []\n                                                 (mongo/fetch :languages :only {:_id false\n                                                                                :Value true\n                                                                                :Headlinelink true})))))\n\n           (GET \&quot;/addUrl\&quot; [] (html/emit* (templates/show-add-new-site\n                                           (sites/get-distinct-values :Country))))\n\n           (GET \&quot;/gdelt\&quot; [] (html/emit* (templates/show-gelt-news\n                                          (into []\n                                                (mongo/fetch :countries :only {:_id false\n                                                                               :Countrylink true}))\n                                          (into []\n                                                (mongo/fetch :languages :only {:_id false\n                                                                               :Headlinelink true})))))\n\n           (POST \&quot;/deleteSite\&quot; request\n             ;(def provera (:params request))\n             (let [link (get (:params request) :link)]\n               (sites/delete-site link)))\n\n           (POST \&quot;/increaseRank\&quot; request\n             (let [link (get (:params request) :link)] (sites/increase-rank link))\n             ;(def provera (:params request))\n             )\n\n           (POST \&quot;/updateSite\&quot; request\n             (let [desclink (get (:params request) :desclink)\n                   description (get (:params request) :description)\n                   rank (get (:params request) :rank)]\n               (sites/update-site desclink description rank)))\n\n           (POST \&quot;/addRss\&quot; request\n             (rss/add-new-rssFeedURL\n               (make-url-for-rss (get-parametar request :country)\n                                 (get-parametar request :language)\n                                 (get-parametar request :word))\n               (str (get-parametar request :word) \&quot; - lang: \&quot; (get-parametar request :language)) (str (get-parametar request :word))))\n\n           (POST \&quot;/addUrl\&quot; request\n             (let [desclink (get (:params request) :desclink)\n                   description (get (:params request) :description)\n                   rank (get (:params request) :rank)\n                   country (get (:params request) :country)]\n               (sites/add-site desclink description rank country)))\n\n           (POST \&quot;/zana\&quot; request\n             (def f (:form-params request)))\n\n\n           (route/resources \&quot;/\&quot;)\n           (route/not-found \&quot;&lt;h1&gt;Page not found&lt;/h1&gt;\&quot;))\n\n\n\n\n\n(def app\n  (-&gt; (handler/site app-routes)\n      (session/wrap-session)))\n\n(defn start-server []\n  (ring.adapter.jetty/run-jetty #'app {:port 9005 :join? false}))\n\n\n&quot; &quot;(ring.adapter.jetty/run-jetty #'app {:port 9005 :join? false})&quot;], :remote []}}</component>
</project>